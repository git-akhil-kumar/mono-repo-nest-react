
services:

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    restart: always

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  cassandra:
    image: cassandra
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_USERNAME=${CASSANDRA_USERNAME}
      - CASSANDRA_PASSWORD=${CASSANDRA_PASSWORD}
    volumes:
      - cassandra_data:/var/lib/cassandra
    restart: always

  backend:
    container_name: backend
    build:
      context: ./backend-nestjs
    image: ${BACKEND_REGISTRY_URL}
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    depends_on:
      - redis
      - mongodb
      - cassandra

  frontend:
    container_name: frontend
    build:
      context: ./frontend
    image: ${FRONTEND_REGISTRY_URL}
    ports:
      - "8080:3000"
    restart: always
    depends_on:
      - backend

  load-test:
    build: "./load-test"
    environment:
      - API_ENDPOINT=http://localhost:4000
    ports:
      - "10000:8080"
    depends_on:
      - backend

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  cassandra_data:
    driver: local

networks:
  mono-repo-networks:
    driver: bridge
